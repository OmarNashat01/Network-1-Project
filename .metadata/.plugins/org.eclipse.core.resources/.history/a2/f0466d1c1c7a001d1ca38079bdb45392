//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "Node0.h"
using namespace std;


Define_Module(Node0);

void Node0::initialize()
{
    // TODO - Generated method body
}

void Node0::handleMessage(cMessage *msg)
{

    Message *mymsg = check_and_cast<Message *>(msg);

    int frame_type = mymsg->getFrame_type();
    double delay = 1.5; // processing and transmission delay

    // Handle received event
    switch (frame_type)
    {
        case intialization:
        {
            if (mymsg->getNodeInd() == getIndex()){             //detect the sending node
                sendWindow.openFile(filenames[mymsg->getNodeInd()]);
                isSender = 1 ;
                delay += mymsg->getStartTime();
            }
            break;
        }
        case frame_arrival:
        {
            // TODO: Implement

            break;
        }
        case cksum_err:
        {
            //TODO: implement
            break;
        }
        case timeout:
        {
            // TODO: implement
            break;
        }
    }


    // Read more messages if available in sender
    window[(wEnd++) % MAX_SEQ].set(getNextMsg());

    // TODO: CHECKK IF THIS WORKS
    if (window[wEnd].isNone)
        wEnd--; // if msg read was NULL discard it

    // Send messages if available
    while (window[indToSend].lost && calcFilledSlots(indToSend) > 0) indToSend++;

    if (calcFilledSlots(indToSend) > 0)
        sendDelayed(bufToFrame(window[indToSend]), delay, "out");



//    if (strcmp(msg->getName(),"Coordinator") == 0)
//    {
//        Message *coordinator_msg = check_and_cast<Message *>(msg);
//        if (coordinator_msg->getHeader() == 0)
//        {
//            flag = 1;
//            //set starting time
//        }
//    }

    //if sender(flag=1) implement the sender protocol, else receiver protocol

}
